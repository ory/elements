{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.8",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@author",
          "syntaxKind": "block"
        },
        {
          "tagName": "@module",
          "syntaxKind": "block"
        },
        {
          "tagName": "@mergeModuleWith",
          "syntaxKind": "block"
        },
        {
          "tagName": "@type",
          "syntaxKind": "block"
        },
        {
          "tagName": "@typedef",
          "syntaxKind": "block"
        },
        {
          "tagName": "@callback",
          "syntaxKind": "block"
        },
        {
          "tagName": "@prop",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@property",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@group",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@groupDescription",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@disableGroups",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@category",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@categoryDescription",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@hidden",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@ignore",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@class",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@abstract",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@document",
          "syntaxKind": "block"
        },
        {
          "tagName": "@default",
          "syntaxKind": "block"
        },
        {
          "tagName": "@extends",
          "syntaxKind": "block"
        },
        {
          "tagName": "@augments",
          "syntaxKind": "block"
        },
        {
          "tagName": "@return",
          "syntaxKind": "block"
        },
        {
          "tagName": "@yields",
          "syntaxKind": "block"
        },
        {
          "tagName": "@enum",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@event",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@expand",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@preventExpand",
          "syntaxKind": "block"
        },
        {
          "tagName": "@expandType",
          "syntaxKind": "block"
        },
        {
          "tagName": "@inline",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@preventInline",
          "syntaxKind": "block"
        },
        {
          "tagName": "@inlineType",
          "syntaxKind": "block"
        },
        {
          "tagName": "@primaryExport",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@template",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@linkcode",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@linkplain",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@include",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@includeCode",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@private",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@protected",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@satisfies",
          "syntaxKind": "block"
        },
        {
          "tagName": "@since",
          "syntaxKind": "block"
        },
        {
          "tagName": "@license",
          "syntaxKind": "block"
        },
        {
          "tagName": "@import",
          "syntaxKind": "block"
        },
        {
          "tagName": "@overload",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@namespace",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@interface",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@function",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@showCategories",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@hideCategories",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@showGroups",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@hideGroups",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@hideconstructor",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@jsx",
          "syntaxKind": "block"
        },
        {
          "tagName": "@summary",
          "syntaxKind": "block"
        },
        {
          "tagName": "@useDeclaredType",
          "syntaxKind": "modifier"
        }
      ],
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@ory/elements-react!",
  "docComment": "",
  "name": "@ory/elements-react",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@ory/elements-react!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@ory/elements-react!SessionContextData:type",
          "docComment": "/**\n * Holds the session context data. This context is used to provide the session data to the children of the provider. It is used by the {@link useSession} hook to access the session data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type SessionContextData = "
            },
            {
              "kind": "Content",
              "text": "{\n    isLoading: boolean;\n    initialized: boolean;\n    session: "
            },
            {
              "kind": "Reference",
              "text": "Session",
              "canonicalReference": "@ory/client-fetch!Session:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    refetch: () => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/client/session-provider.d.ts",
          "releaseTag": "Public",
          "name": "SessionContextData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@ory/elements-react!SessionProvider:function(1)",
          "docComment": "/**\n * A provider that fetches the session from the Ory Network and provides it to the children.\n *\n * To use this provider, wrap your application in it:\n * ```tsx\n * import { SessionProvider } from \"@ory/elements-react\"\n *\n * export default function App() {\n *   return (\n *     <SessionProvider>\n *       <MyApp />\n *     </SessionProvider>\n *   )\n * }\n * ```\n *\n * If you have a session from the server, you can pass it to the provider:\n * ```tsx\n * <SessionProvider session={serverSession}>\n * ```\n *\n * @param props - The provider props\n *\n * @see\n *\n * {@link useSession}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function SessionProvider({ "
            },
            {
              "kind": "Reference",
              "text": "session",
              "canonicalReference": "@ory/elements-react!~__type#session"
            },
            {
              "kind": "Content",
              "text": ": initialSession, children, baseUrl, }: "
            },
            {
              "kind": "Reference",
              "text": "SessionProviderProps",
              "canonicalReference": "@ory/elements-react!SessionProviderProps:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/client/session-provider.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ session: initialSession, children, baseUrl, }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "SessionProvider"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@ory/elements-react!SessionProviderProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type SessionProviderProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    session?: "
            },
            {
              "kind": "Reference",
              "text": "Session",
              "canonicalReference": "@ory/client-fetch!Session:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    baseUrl?: string;\n} & "
            },
            {
              "kind": "Reference",
              "text": "React.PropsWithChildren",
              "canonicalReference": "@types/react!React.PropsWithChildren:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/client/session-provider.d.ts",
          "releaseTag": "Public",
          "name": "SessionProviderProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@ory/elements-react!useSession:function(1)",
          "docComment": "/**\n * A hook to get the current session from the Ory Network.\n *\n * Usage:\n * ```ts\n * const session = useSession()\n *\n * if (session.state == \"loading\") {\n *  return <div>Loading...</div>\n * }\n *\n * if (session.state == \"authenticated\") {\n *  return <div>Session: {session.session.id}</div>\n * }\n * ```\n *\n * :::note This is a client-side hook and must be used within a React component. On the server, you can use the getServerSession function from `@ory/nextjs` and hydrate SessionProvider with the session. :::\n *\n * @returns The current session, and error or loading state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function useSession(): "
            },
            {
              "kind": "Reference",
              "text": "SessionContextData",
              "canonicalReference": "@ory/elements-react!SessionContextData:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/client/useSession.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useSession"
        }
      ]
    }
  ]
}
